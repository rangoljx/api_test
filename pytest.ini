# pytest.ini
[pytest]

# 指定pytest应该在哪些目录或文件中寻找测试文件
testpaths = tests
# 指定pytest应该识别哪些文件作为测试文件
python_files = test_*.py
# 指定pytest应该识别哪些类作为测试类
python_classes = Test*
# 指定pytest应该识别哪些函数作为测试函数
python_functions = test_*

# 传递给pytest的额外命令行选项
# -v: 启用详细模式，显示每个测试的运行结果
# -s: 禁用输出捕获，让print语句直接显示
# --alluredir: 指定Allure测试结果的存储目录
# --clean-alluredir: 在生成新的测试结果之前清空指定的Allure结果目录
;   --reruns 3 --reruns-delay 2  如果用例中使用了就不需要添加到启动命令了
addopts = -vs --alluredir=results/ --clean-alluredir --html=results/report.html --self-contained-html

# 日志配置
# log_cli: 在控制台实时输出日志
# log_cli_level: 设置控制台日志的级别
# log_cli_format: 设置控制台日志的格式
# log_cli_date_format: 设置控制台日志的日期格式
# log_file: 指定日志文件存放的路径
# log_file_level: 设置日志文件中的级别
# log_file_format: 设置日志文件中的日志格式
# log_file_date_format: 设置日志文件中的日志日期格式
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s %(filename)s:%(lineno)s [%(levelname)s]: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S
log_file = logs/pytest.log
; log_file_level = INFO
; log_file_format = %(asctime)s %(filename)s:%(lineno)s [%(levelname)s]: %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# （可选）其他pytest配置，如插件、标记等
# plugins = pytest-cov pytest-xdist
# markers = smoke regression